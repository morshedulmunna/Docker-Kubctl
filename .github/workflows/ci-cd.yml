name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # VPS deployment info
  VPS_HOST: ${{ secrets.VPS_HOST }}
  VPS_USER: ${{ secrets.VPS_USER }}
  VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
  VPS_PORT: ${{ secrets.VPS_PORT || '22' }}
  # Domain info
  DOMAIN: ${{ secrets.DOMAIN }}
  EMAIL: ${{ secrets.EMAIL }}

# Set permissions for GITHUB_TOKEN
permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json
      
      - name: Install dependencies
        working-directory: ./web
        run: npm ci --legacy-peer-deps
      
      - name: Run tests
        working-directory: ./web
        run: npm test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: true
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./web
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install SSHpass
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass
      
      - name: Deploy to VPS
        run: |
          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          
          # Install required packages
          apt-get update
          apt-get install -y nginx certbot python3-certbot-nginx
          
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull the latest image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # Stop and remove existing container
          docker stop web || true
          docker rm web || true
          
          # Run new container
          docker run -d \
            --name web \
            -p 3000:3000 \
            --restart unless-stopped \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # Configure Nginx
          cat > /etc/nginx/sites-available/${{ env.DOMAIN }} << 'NGINX'
          server {
              listen 80;
              server_name ${{ env.DOMAIN }};
              
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
              }
          }
          NGINX
          
          # Enable the site
          ln -sf /etc/nginx/sites-available/${{ env.DOMAIN }} /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          
          # Test Nginx configuration
          nginx -t
          
          # Restart Nginx
          systemctl restart nginx
          
          # Obtain SSL certificate
          certbot --nginx -d ${{ env.DOMAIN }} --non-interactive --agree-tos --email ${{ env.EMAIL }} --redirect
          
          # Set up automatic renewal
          echo "0 0 * * * root certbot renew --quiet" > /etc/cron.d/certbot-renew
          EOF
          
          # Make the script executable
          chmod +x deploy.sh
          
          # Copy and execute the script on the VPS
          sshpass -p "${{ env.VPS_PASSWORD }}" scp -o StrictHostKeyChecking=no -P ${{ env.VPS_PORT }} deploy.sh ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/tmp/
          sshpass -p "${{ env.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} 'bash /tmp/deploy.sh' 