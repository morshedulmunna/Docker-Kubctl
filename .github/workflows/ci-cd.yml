name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    services:
      # Postgres
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgresdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      # Redis
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      # Setup Node.js 
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      # Test Client (React)
      - name: Test Client (React)
        working-directory: ./client
        run: |
          npm ci
          npm run build
      
      # Test Server (API)
      - name: Test Server (API)
        working-directory: ./server
        run: |
          npm ci
          npm test || true
      
      # Test Worker (Redis)
      - name: Test Worker (Redis)
        working-directory: ./worker
        run: |
          npm ci
          npm test || true

  build-and-push:
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # Build and push Client (React)
      - name: Build and push Client (React)
        uses: docker/build-push-action@v4
        with:
          context: ./client
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/multi-client:latest
      
      # Build and push Server (API)
      - name: Build and push Server (API)
        uses: docker/build-push-action@v4
        with:
          context: ./server
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/multi-server:latest
      
      # Build and push Worker (Redis)
      - name: Build and push Worker (Redis)
        uses: docker/build-push-action@v4
        with:
          context: ./worker
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/multi-worker:latest
      
      # Build and push Nginx (Proxy)
      - name: Build and push Nginx (Proxy)
        uses: docker/build-push-action@v4
        with:
          context: ./nginx
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/multi-nginx:latest

  deploy:
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    
    steps:
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          
      - name: Deploy to VPS
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            cd ${{ secrets.PROJECT_PATH }} &&
            docker-compose pull &&
            docker-compose up -d --force-recreate &&
            docker system prune -f
          '